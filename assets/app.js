angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(e){e.$on("login",function(n,t){e.currentUser=t}),e.logout=function(){e.currentUser=null}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(e,n,t){e.login=function(o,r){n.login(o,r).then(function(n){e.$emit("login",n.data),t.path("/")})}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(e,n,t){e.register=function(o,r,c){c===r&&n.register(o,r).then(function(c){n.login(o,r).then(function(n){e.$emit("login",n.data),t.path("/")})})}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"ScoresCtrl",templateUrl:"scores.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/home",{controller:"HomeCtrl",templateUrl:"home.html"})}]),angular.module("app").controller("ScoresCtrl",["$scope","ScoresSvc","$location",function(e,n,t){e.addScore=function(){e.scores&&n.create({username:"anthonyprograms",score:e.scores}).success(function(e){console.log("success")})},n.fetch().success(function(n){e.scores=n})}]),angular.module("app").service("ScoresSvc",["$http",function(e){this.fetch=function(){return e.get("/api/scores")},this.create=function(n){return e.post("/api/scores",n)}}]),angular.module("app").service("UserSvc",["$http",function(e){var n=this;n.getUser=function(){return e.get("/api/users")},n.login=function(t,o){return e.post("/api/sessions",{username:t,password:o}).then(function(t){return n.token=t.data,e.defaults.headers.common["X-Auth"]=t.data,n.getUser()})},n.register=function(t,o){return e.post("/api/users",{username:t,password:o}).then(function(){return n.login(t,o)})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicmVnaXN0ZXIuY3RybC5qcyIsInJvdXRlcy5qcyIsInNjb3Jlcy5jdHJsLmpzIiwic2NvcmVzLnN2Yy5qcyIsInVzZXIuc3ZjLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiXyIsInVzZXIiLCJjdXJyZW50VXNlciIsImxvZ291dCIsIlVzZXJTdmMiLCIkbG9jYXRpb24iLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ0aGVuIiwicmVzcG9uc2UiLCIkZW1pdCIsImRhdGEiLCJwYXRoIiwicmVnaXN0ZXIiLCJyZXR5cGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsIlNjb3Jlc1N2YyIsImFkZFNjb3JlIiwic2NvcmVzIiwiY3JlYXRlIiwic2NvcmUiLCJzdWNjZXNzIiwicG9zdCIsImNvbnNvbGUiLCJsb2ciLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJzdmMiLCJnZXRVc2VyIiwidmFsIiwidG9rZW4iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFBQyxPQUFBLE9BQ0EsWUNEQUQsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLG1CQUFBLFNBQUEsU0FBQUMsR0FDQUEsRUFBQUMsSUFBQSxRQUFBLFNBQUFDLEVBQUFDLEdBQ0FILEVBQUFJLFlBQUFELElBRUFILEVBQUFLLE9BQUEsV0FDQUwsRUFBQUksWUFBQSxTQ05BUCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFVBQUEsWUFBQSxTQUFBQyxFQUFBTSxFQUFBQyxHQUNBUCxFQUFBUSxNQUFBLFNBQUFDLEVBQUFDLEdBQ0FKLEVBQUFFLE1BQUFDLEVBQUFDLEdBQ0FDLEtBQUEsU0FBQUMsR0FDQVosRUFBQWEsTUFBQSxRQUFBRCxFQUFBRSxNQUNBUCxFQUFBUSxLQUFBLFdDTkFsQixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsZ0JBQUEsU0FBQSxVQUFBLFlBQUEsU0FBQUMsRUFBQU0sRUFBQUMsR0FDQVAsRUFBQWdCLFNBQUEsU0FBQVAsRUFBQUMsRUFBQU8sR0FDQUEsSUFBQVAsR0FDQUosRUFBQVUsU0FBQVAsRUFBQUMsR0FDQUMsS0FBQSxTQUFBUixHQUNBRyxFQUFBRSxNQUFBQyxFQUFBQyxHQUNBQyxLQUFBLFNBQUFDLEdBQ0FaLEVBQUFhLE1BQUEsUUFBQUQsRUFBQUUsTUFDQVAsRUFBQVEsS0FBQSxhQ1RBbEIsUUFBQUMsT0FBQSxPQUNBb0IsUUFBQSxpQkFBQSxTQUFBQyxHQUNBQSxFQUNBQyxLQUFBLEtBQUFyQixXQUFBLGFBQUFzQixZQUFBLGdCQUNBRCxLQUFBLGFBQUFyQixXQUFBLGVBQUFzQixZQUFBLGtCQUNBRCxLQUFBLFVBQUFyQixXQUFBLFlBQUFzQixZQUFBLGVBQ0FELEtBQUEsU0FBQXJCLFdBQUEsV0FBQXNCLFlBQUEsaUJDTkF4QixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsY0FBQSxTQUFBLFlBQUEsWUFBQSxTQUFBQyxFQUFBc0IsRUFBQWYsR0FDQVAsRUFBQXVCLFNBQUEsV0FDQXZCLEVBQUF3QixRQUNBRixFQUFBRyxRQUNBaEIsU0FBQSxrQkFDQWlCLE1BQUExQixFQUFBd0IsU0FDQUcsUUFBQSxTQUFBQyxHQUNBQyxRQUFBQyxJQUFBLGNBS0FSLEVBQUFTLFFBQUFKLFFBQUEsU0FBQUgsR0FDQXhCLEVBQUF3QixPQUFBQSxPQ2RBM0IsUUFBQUMsT0FBQSxPQUNBa0MsUUFBQSxhQUFBLFFBQUEsU0FBQUMsR0FDQUMsS0FBQUgsTUFBQSxXQUNBLE1BQUFFLEdBQUFFLElBQUEsZ0JBRUFELEtBQUFULE9BQUEsU0FBQUMsR0FDQSxNQUFBTyxHQUFBTCxLQUFBLGNBQUFGLE9DTkE3QixRQUFBQyxPQUFBLE9BQ0FrQyxRQUFBLFdBQUEsUUFBQSxTQUFBQyxHQUNBLEdBQUFHLEdBQUFGLElBQ0FFLEdBQUFDLFFBQUEsV0FDQSxNQUFBSixHQUFBRSxJQUFBLGVBRUFDLEVBQUE1QixNQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQXVCLEdBQUFMLEtBQUEsaUJBQ0FuQixTQUFBQSxFQUFBQyxTQUFBQSxJQUNBQyxLQUFBLFNBQUEyQixHQUdBLE1BRkFGLEdBQUFHLE1BQUFELEVBQUF4QixLQUNBbUIsRUFBQU8sU0FBQUMsUUFBQUMsT0FBQSxVQUFBSixFQUFBeEIsS0FDQXNCLEVBQUFDLGFBR0FELEVBQUFwQixTQUFBLFNBQUFQLEVBQUFDLEdBQ0EsTUFBQXVCLEdBQUFMLEtBQUEsY0FDQW5CLFNBQUFBLEVBQUFDLFNBQUFBLElBQ0FDLEtBQUEsV0FDQSxNQUFBeUIsR0FBQTVCLE1BQUFDLEVBQUFDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG4gICAgJ25nUm91dGUnXG5dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcbiAgICAkc2NvcGUuJG9uKCdsb2dpbicsIGZ1bmN0aW9uIChfLCB1c2VyKSB7XG4gICAgICAgICRzY29wZS5jdXJyZW50VXNlciA9IHVzZXJcbiAgICB9KVxuICAgICRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRzY29wZS5jdXJyZW50VXNlciA9IG51bGxcbiAgICB9XG59KSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIFVzZXJTdmMsICRsb2NhdGlvbikge1xuICAgICAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgIFVzZXJTdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKVxuICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKVxuICAgICAgICB9KVxuICAgIH1cbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjLCAkbG9jYXRpb24pIHtcbiAgICAkc2NvcGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkLCByZXR5cGUpIHtcbiAgICAgICAgaWYgKHJldHlwZSA9PT0gcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIFVzZXJTdmMucmVnaXN0ZXIodXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgICAgICAgICBVc2VyU3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHJlc3BvbnNlLmRhdGEpXG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJylcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb25maWcoZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgJHJvdXRlUHJvdmlkZXJcbiAgICAud2hlbignLycsIHsgY29udHJvbGxlcjogJ1Njb3Jlc0N0cmwnLCB0ZW1wbGF0ZVVybDogJ3Njb3Jlcy5odG1sJyB9KVxuICAgIC53aGVuKCcvcmVnaXN0ZXInLCB7Y29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsIHRlbXBsYXRlVXJsOiAncmVnaXN0ZXIuaHRtbCcgfSlcbiAgICAud2hlbignL2xvZ2luJywge2NvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLCB0ZW1wbGF0ZVVybDogJ2xvZ2luLmh0bWwnIH0pXG4gICAgLndoZW4oJy9ob21lJywge2NvbnRyb2xsZXI6ICdIb21lQ3RybCcsIHRlbXBsYXRlVXJsOiAnaG9tZS5odG1sJyB9KVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1Njb3Jlc0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBTY29yZXNTdmMsICRsb2NhdGlvbikge1xuICAgICRzY29wZS5hZGRTY29yZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCRzY29wZS5zY29yZXMpIHtcbiAgICAgICAgICAgIFNjb3Jlc1N2Yy5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAnYW50aG9ueXByb2dyYW1zJyxcbiAgICAgICAgICAgICAgICBzY29yZTogJHNjb3BlLnNjb3Jlc1xuICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAocG9zdCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdWNjZXNzJylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBTY29yZXNTdmMuZmV0Y2goKS5zdWNjZXNzKGZ1bmN0aW9uIChzY29yZXMpIHtcbiAgICAgICAgJHNjb3BlLnNjb3JlcyA9IHNjb3Jlc1xuICAgIH0pXG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnU2NvcmVzU3ZjJywgZnVuY3Rpb24gKCRodHRwKSB7XG4gICAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9zY29yZXMnKVxuICAgIH1cbiAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uIChzY29yZSkge1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zY29yZXMnLCBzY29yZSlcbiAgICB9XG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnVXNlclN2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xuICAgIHZhciBzdmMgPSB0aGlzXG4gICAgc3ZjLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKVxuICAgIH1cbiAgICBzdmMubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xuICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICBzdmMudG9rZW4gPSB2YWwuZGF0YVxuICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gdmFsLmRhdGFcbiAgICAgICAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHN2Yy5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XG4gICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICB9KVxuICAgIH1cbn0pXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
